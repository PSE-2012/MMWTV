//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace System.Collections.ObjectModel
{
	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

	public class Collection<T> : IList<T>, ICollection<T>, IEnumerable<T>, IList, ICollection, IEnumerable
	{
		public virtual int Count
		{
			get;
			private set;
		}

		protected virtual IList<T> Items
		{
			get;
			private set;
		}

		public Collection(IList<T> list)
		{
		}

		public virtual void Add(T item)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Contains(T item)
		{
			throw new System.NotImplementedException();
		}

		public virtual void CopyTo(IEnumerable<object> array, int index)
		{
			throw new System.NotImplementedException();
		}

		public virtual int IndexOf(T item)
		{
			throw new System.NotImplementedException();
		}

		public virtual void Insert(int index, T item)
		{
			throw new System.NotImplementedException();
		}

		protected virtual void InsertItem(int index, T item)
		{
			throw new System.NotImplementedException();
		}

		public virtual bool Remove(T item)
		{
			throw new System.NotImplementedException();
		}

		public virtual void RemoveAt(int index)
		{
			throw new System.NotImplementedException();
		}

		protected virtual void RemoveItem(int index)
		{
			throw new System.NotImplementedException();
		}

		protected virtual void SetItem(int index, T item)
		{
			throw new System.NotImplementedException();
		}

		public Collection()
		{
		}

		public virtual void Clear()
		{
			throw new System.NotImplementedException();
		}

		protected virtual void ClearItems()
		{
			throw new System.NotImplementedException();
		}

		public virtual IEnumerator<T> GetEnumerator()
		{
			throw new System.NotImplementedException();
		}

		public virtual T this[int index]
		{
			get
			{
				throw new System.NotImplementedException();
			}
			set
			{
				throw new System.NotImplementedException();
			}
		}

	}
}

