// ------------------------------------------------------------------------------
//  <auto-generated>
//      Dieser Code wurde vom codierten UI-Testbuilder generiert.
//      Version: 10.0.0.0
//
//      In dieser Datei sind spezialisierte Klassen definiert, die in einem
//      codierten UI-Test verwendet werden.
//      In dieser Datei können die erforderlichen Anpassungen vorgenommen werden.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace OQAT_Tests
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UITesting.WpfControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// projectcreate - Verwenden Sie "projectcreateParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void projectcreate()
        {
            #region Variable Declarations
            WpfButton uINeuesProjekterstelleButton = this.UIObjectiveQualityAsseWindow.UIItemCustom.UINeuesProjekterstelleButton;
            WpfButton uIBrowseButton = this.UINeuesProjekterstelleWindow.UITitelundPfadwählenGroup.UIBrowseButton;
            WinComboBox uIDateinameComboBox = this.UISpeichernunterWindow.UIDetailbereichPane.UIDateinameComboBox;
            WinButton uISpeichernButton = this.UISpeichernunterWindow.UISpeichernWindow.UISpeichernButton;
            WpfEdit uIProjDescFieldEdit = this.UINeuesProjekterstelleWindow.UIBeschreibungGroup.UIProjDescFieldEdit;
            WpfEdit uIItemEdit = this.UINeuesProjekterstelleWindow.UITitelundPfadwählenGroup.UITitelText.UIItemEdit;
            WpfButton uIProjekterstellenButton = this.UINeuesProjekterstelleWindow.UIProjekterstellenButton;
            #endregion

            // "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
            ApplicationUnderTest uIObjectiveQualityAsseWindow = ApplicationUnderTest.Launch(this.projectcreateParams.UIObjectiveQualityAsseWindowExePath, this.projectcreateParams.UIObjectiveQualityAsseWindowAlternateExePath);

            // Klicken "Neues Projekt erstellen" Schaltfläche
            Mouse.Click(uINeuesProjekterstelleButton, new Point(131, 19));

            // Klicken "Browse" Schaltfläche
            Mouse.Click(uIBrowseButton, new Point(121, 35));

            // "test.oqatPrj" in "Dateiname:" Kombinationsfeld auswählen
            uIDateinameComboBox.EditableItem = this.projectcreateParams.UIDateinameComboBoxEditableItem;

            // Klicken "&Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(37, 23));

            // "Hallo" in "projDescField" Textfeld eingeben
            uIProjDescFieldEdit.Text = this.projectcreateParams.UIProjDescFieldEditText;

            // "testen" in erstes Textfeld neben "Titel:" Beschriftung eingeben
            uIItemEdit.Text = this.projectcreateParams.UIItemEditText;

            // Klicken "Projekt erstellen" Schaltfläche
            Mouse.Click(uIProjekterstellenButton, new Point(295, 23));
        }
        
        /// <summary>
        /// Cancelbutton - Verwenden Sie "CancelbuttonParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Cancelbutton()
        {
            #region Variable Declarations
            WpfButton uIProjektsuchenButton = this.UIObjectiveQualityAsseWindow.UIItemCustom.UIProjektsuchenButton;
            WinButton uISchließenButton = this.UIÖffnenWindow.UIÖffnenTitleBar.UISchließenButton;
            WpfButton uINeuesProjekterstelleButton = this.UIObjectiveQualityAsseWindow.UIItemCustom.UINeuesProjekterstelleButton;
            WpfButton uIAbbrechenButton = this.UINeuesProjekterstelleWindow.UIAbbrechenButton;
            #endregion

            // "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
            ApplicationUnderTest uIObjectiveQualityAsseWindow = ApplicationUnderTest.Launch(this.CancelbuttonParams.UIObjectiveQualityAsseWindowExePath, this.CancelbuttonParams.UIObjectiveQualityAsseWindowAlternateExePath);

            // Klicken "Projekt suchen" Schaltfläche
            Mouse.Click(uIProjektsuchenButton, new Point(54, 6));

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(27, 3));

            // Klicken "Neues Projekt erstellen" Schaltfläche
            Mouse.Click(uINeuesProjekterstelleButton, new Point(112, 20));

            // Klicken "Abbrechen" Schaltfläche
            Mouse.Click(uIAbbrechenButton, new Point(324, 15));
        }
        
        /// <summary>
        /// Assertsuccesfullproject - Verwenden Sie "AssertsuccesfullprojectExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void Assertsuccesfullproject()
        {
            #region Variable Declarations
            WinListItem uIOttooqatPrjListItem = this.UIProgramManagerWindow.UIDesktopList.UIOttooqatPrjListItem;
            #endregion

            // Überprüfen, ob Eigenschaft von "otto.oqatPrj"-Listenelement Exists True entspricht
            Assert.AreEqual(this.AssertsuccesfullprojectExpectedValues.UIOttooqatPrjListItemExists, uIOttooqatPrjListItem.Exists);

            // Überprüfen, ob Eigenschaft von "otto.oqatPrj"-Listenelement DisplayText otto.oqatPrj entspricht
            Assert.AreEqual(this.AssertsuccesfullprojectExpectedValues.UIOttooqatPrjListItemDisplayText, uIOttooqatPrjListItem.DisplayText);
        }
        
        /// <summary>
        /// AssertMethod1 - Verwenden Sie "AssertMethod1ExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertMethod1()
        {
            #region Variable Declarations
            WinListItem uITestoqatPrjListItem = this.UIProgramManagerWindow.UIDesktopList.UITestoqatPrjListItem;
            #endregion

            // Überprüfen, ob Eigenschaft von "test.oqatPrj"-Listenelement Exists True entspricht
            Assert.AreEqual(this.AssertMethod1ExpectedValues.UITestoqatPrjListItemExists, uITestoqatPrjListItem.Exists);
        }
        
        /// <summary>
        /// AssertMethod2 - Verwenden Sie "AssertMethod2ExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertMethod2()
        {
            #region Variable Declarations
            WinListItem uITestoqatPrjListItem = this.UIProgramManagerWindow.UIDesktopList.UITestoqatPrjListItem;
            #endregion

            // Überprüfen, ob Eigenschaft von "test.oqatPrj"-Listenelement DisplayText test.oqatPrj entspricht
            Assert.AreEqual(this.AssertMethod2ExpectedValues.UITestoqatPrjListItemDisplayText, uITestoqatPrjListItem.DisplayText);
        }
        
        /// <summary>
        /// CancelbuttonProjectOpendialog - Verwenden Sie "CancelbuttonProjectOpendialogParams", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void CancelbuttonProjectOpendialog()
        {
            #region Variable Declarations
            WpfButton uINeuesProjekterstelleButton = this.UIObjectiveQualityAsseWindow.UIItemCustom.UINeuesProjekterstelleButton;
            WpfEdit uIItemEdit = this.UINeuesProjekterstelleWindow.UITitelundPfadwählenGroup.UITitelText.UIItemEdit;
            WpfButton uIBrowseButton = this.UINeuesProjekterstelleWindow.UITitelundPfadwählenGroup.UIBrowseButton;
            WinButton uISpeichernButton = this.UISpeichernunterWindow.UISpeichernWindow.UISpeichernButton;
            WpfEdit uIProjDescFieldEdit = this.UINeuesProjekterstelleWindow.UIBeschreibungGroup.UIProjDescFieldEdit;
            WpfButton uIAbbrechenButton = this.UINeuesProjekterstelleWindow.UIAbbrechenButton;
            #endregion

            // "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
            ApplicationUnderTest uIObjectiveQualityAsseWindow = ApplicationUnderTest.Launch(this.CancelbuttonProjectOpendialogParams.UIObjectiveQualityAsseWindowExePath, this.CancelbuttonProjectOpendialogParams.UIObjectiveQualityAsseWindowAlternateExePath);

            // Klicken "Neues Projekt erstellen" Schaltfläche
            Mouse.Click(uINeuesProjekterstelleButton, new Point(128, 13));

            // "test" in erstes Textfeld neben "Titel:" Beschriftung eingeben
            uIItemEdit.Text = this.CancelbuttonProjectOpendialogParams.UIItemEditText;

            // Klicken "Browse" Schaltfläche
            Mouse.Click(uIBrowseButton, new Point(81, 52));

            // Klicken "&Speichern" Schaltfläche
            Mouse.Click(uISpeichernButton, new Point(56, 20));

            // "Hallo" in "projDescField" Textfeld eingeben
            uIProjDescFieldEdit.Text = this.CancelbuttonProjectOpendialogParams.UIProjDescFieldEditText;

            // Klicken "Abbrechen" Schaltfläche
            Mouse.Click(uIAbbrechenButton, new Point(362, 30));
        }
        
        /// <summary>
        /// AssertMethod3 - Verwenden Sie "AssertMethod3ExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertMethod3()
        {
            #region Variable Declarations
            WinListItem uITestoqatPrjListItem = this.UIProgramManagerWindow.UIDesktopList.UITestoqatPrjListItem;
            #endregion

            // Überprüfen, ob Eigenschaft von "test.oqatPrj"-Listenelement Exists false entspricht
            Assert.AreEqual(this.AssertMethod3ExpectedValues.UITestoqatPrjListItemExists, uITestoqatPrjListItem.Exists);
        }
        
        /// <summary>
        /// projectOpendialogtest3 - Verwenden Sie "projectOpendialogtest3Params", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void projectOpendialogtest3()
        {
            #region Variable Declarations
            WpfButton uINeuesProjekterstelleButton = this.UIObjectiveQualityAsseWindow.UIItemCustom.UINeuesProjekterstelleButton;
            WpfButton uIProjekterstellenButton = this.UINeuesProjekterstelleWindow.UIProjekterstellenButton;
            WpfButton uISchließenButton = this.UIObjectiveQualityAsseWindow.UIObjectiveQualityAsseTitleBar.UISchließenButton;
            WpfEdit uITbTitelEdit = this.UINeuesProjekterstelleWindow.UITitelundPfadwählenGroup.UITbTitelEdit;
            WinWindow uIObjectiveQualityAsseWindow2 = this.UIObjectiveQualityAsseWindow2;
            #endregion

            // "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
            ApplicationUnderTest uIObjectiveQualityAsseWindow = ApplicationUnderTest.Launch(this.projectOpendialogtest3Params.UIObjectiveQualityAsseWindowExePath, this.projectOpendialogtest3Params.UIObjectiveQualityAsseWindowAlternateExePath);

            // Klicken "Neues Projekt erstellen" Schaltfläche
            Mouse.Click(uINeuesProjekterstelleButton, new Point(70, 17));

            // Klicken "Projekt erstellen" Schaltfläche
            Mouse.Click(uIProjekterstellenButton, new Point(193, 18));

            // Klicken "Schließen" Schaltfläche
            Mouse.Click(uISchließenButton, new Point(29, 12));

            // "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
            ApplicationUnderTest uIObjectiveQualityAsseWindow1 = ApplicationUnderTest.Launch(this.projectOpendialogtest3Params.UIObjectiveQualityAsseWindowExePath1, this.projectOpendialogtest3Params.UIObjectiveQualityAsseWindowAlternateExePath1);

            // Klicken "Neues Projekt erstellen" Schaltfläche
            Mouse.Click(uINeuesProjekterstelleButton, new Point(68, 6));

            // "test1" in "tbTitel" Textfeld eingeben
            uITbTitelEdit.Text = this.projectOpendialogtest3Params.UITbTitelEditText;

            // Klicken "Projekt erstellen" Schaltfläche
            Mouse.Click(uIProjekterstellenButton, new Point(243, 8));

            // Klicken "Objective Quality Assessment Toolkit" Fenster
            Mouse.Click(uIObjectiveQualityAsseWindow2, new Point(1077, 5));
        }
        
        /// <summary>
        /// AssertMethod4 - Verwenden Sie "AssertMethod4ExpectedValues", um Parameter an diese Methode zu übergeben.
        /// </summary>
        public void AssertMethod4()
        {
            #region Variable Declarations
            WinListItem uIMyOqatPrjoqatPrjListItem = this.UIGRILLEDSHEEPWindow.UIItemWindow.UIElementansichtList.UIMyOqatPrjoqatPrjListItem;
            WinListItem uITest1oqatPrjListItem = this.UIGRILLEDSHEEPWindow.UIItemWindow.UIElementansichtList.UITest1oqatPrjListItem;
            #endregion

            // Überprüfen, ob Eigenschaft von "myOqatPrj.oqatPrj"-Listenelement Exists True entspricht
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UIMyOqatPrjoqatPrjListItemExists, uIMyOqatPrjoqatPrjListItem.Exists);

            // Überprüfen, ob Eigenschaft von "test1.oqatPrj"-Listenelement Exists True entspricht
            Assert.AreEqual(this.AssertMethod4ExpectedValues.UITest1oqatPrjListItemExists, uITest1oqatPrjListItem.Exists);
        }
        
        #region Properties
        public virtual projectcreateParams projectcreateParams
        {
            get
            {
                if ((this.mprojectcreateParams == null))
                {
                    this.mprojectcreateParams = new projectcreateParams();
                }
                return this.mprojectcreateParams;
            }
        }
        
        public virtual CancelbuttonParams CancelbuttonParams
        {
            get
            {
                if ((this.mCancelbuttonParams == null))
                {
                    this.mCancelbuttonParams = new CancelbuttonParams();
                }
                return this.mCancelbuttonParams;
            }
        }
        
        public virtual AssertsuccesfullprojectExpectedValues AssertsuccesfullprojectExpectedValues
        {
            get
            {
                if ((this.mAssertsuccesfullprojectExpectedValues == null))
                {
                    this.mAssertsuccesfullprojectExpectedValues = new AssertsuccesfullprojectExpectedValues();
                }
                return this.mAssertsuccesfullprojectExpectedValues;
            }
        }
        
        public virtual AssertMethod1ExpectedValues AssertMethod1ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod1ExpectedValues == null))
                {
                    this.mAssertMethod1ExpectedValues = new AssertMethod1ExpectedValues();
                }
                return this.mAssertMethod1ExpectedValues;
            }
        }
        
        public virtual AssertMethod2ExpectedValues AssertMethod2ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod2ExpectedValues == null))
                {
                    this.mAssertMethod2ExpectedValues = new AssertMethod2ExpectedValues();
                }
                return this.mAssertMethod2ExpectedValues;
            }
        }
        
        public virtual CancelbuttonProjectOpendialogParams CancelbuttonProjectOpendialogParams
        {
            get
            {
                if ((this.mCancelbuttonProjectOpendialogParams == null))
                {
                    this.mCancelbuttonProjectOpendialogParams = new CancelbuttonProjectOpendialogParams();
                }
                return this.mCancelbuttonProjectOpendialogParams;
            }
        }
        
        public virtual AssertMethod3ExpectedValues AssertMethod3ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod3ExpectedValues == null))
                {
                    this.mAssertMethod3ExpectedValues = new AssertMethod3ExpectedValues();
                }
                return this.mAssertMethod3ExpectedValues;
            }
        }
        
        public virtual projectOpendialogtest3Params projectOpendialogtest3Params
        {
            get
            {
                if ((this.mprojectOpendialogtest3Params == null))
                {
                    this.mprojectOpendialogtest3Params = new projectOpendialogtest3Params();
                }
                return this.mprojectOpendialogtest3Params;
            }
        }
        
        public virtual AssertMethod4ExpectedValues AssertMethod4ExpectedValues
        {
            get
            {
                if ((this.mAssertMethod4ExpectedValues == null))
                {
                    this.mAssertMethod4ExpectedValues = new AssertMethod4ExpectedValues();
                }
                return this.mAssertMethod4ExpectedValues;
            }
        }
        
        public UIObjectiveQualityAsseWindow UIObjectiveQualityAsseWindow
        {
            get
            {
                if ((this.mUIObjectiveQualityAsseWindow == null))
                {
                    this.mUIObjectiveQualityAsseWindow = new UIObjectiveQualityAsseWindow();
                }
                return this.mUIObjectiveQualityAsseWindow;
            }
        }
        
        public UINeuesProjekterstelleWindow UINeuesProjekterstelleWindow
        {
            get
            {
                if ((this.mUINeuesProjekterstelleWindow == null))
                {
                    this.mUINeuesProjekterstelleWindow = new UINeuesProjekterstelleWindow();
                }
                return this.mUINeuesProjekterstelleWindow;
            }
        }
        
        public UISpeichernunterWindow UISpeichernunterWindow
        {
            get
            {
                if ((this.mUISpeichernunterWindow == null))
                {
                    this.mUISpeichernunterWindow = new UISpeichernunterWindow();
                }
                return this.mUISpeichernunterWindow;
            }
        }
        
        public UIÖffnenWindow UIÖffnenWindow
        {
            get
            {
                if ((this.mUIÖffnenWindow == null))
                {
                    this.mUIÖffnenWindow = new UIÖffnenWindow();
                }
                return this.mUIÖffnenWindow;
            }
        }
        
        public UIProgramManagerWindow UIProgramManagerWindow
        {
            get
            {
                if ((this.mUIProgramManagerWindow == null))
                {
                    this.mUIProgramManagerWindow = new UIProgramManagerWindow();
                }
                return this.mUIProgramManagerWindow;
            }
        }
        
        public UIObjectiveQualityAsseWindow2 UIObjectiveQualityAsseWindow2
        {
            get
            {
                if ((this.mUIObjectiveQualityAsseWindow2 == null))
                {
                    this.mUIObjectiveQualityAsseWindow2 = new UIObjectiveQualityAsseWindow2();
                }
                return this.mUIObjectiveQualityAsseWindow2;
            }
        }
        
        public UIGRILLEDSHEEPWindow UIGRILLEDSHEEPWindow
        {
            get
            {
                if ((this.mUIGRILLEDSHEEPWindow == null))
                {
                    this.mUIGRILLEDSHEEPWindow = new UIGRILLEDSHEEPWindow();
                }
                return this.mUIGRILLEDSHEEPWindow;
            }
        }
        #endregion
        
        #region Fields
        private projectcreateParams mprojectcreateParams;
        
        private CancelbuttonParams mCancelbuttonParams;
        
        private AssertsuccesfullprojectExpectedValues mAssertsuccesfullprojectExpectedValues;
        
        private AssertMethod1ExpectedValues mAssertMethod1ExpectedValues;
        
        private AssertMethod2ExpectedValues mAssertMethod2ExpectedValues;
        
        private CancelbuttonProjectOpendialogParams mCancelbuttonProjectOpendialogParams;
        
        private AssertMethod3ExpectedValues mAssertMethod3ExpectedValues;
        
        private projectOpendialogtest3Params mprojectOpendialogtest3Params;
        
        private AssertMethod4ExpectedValues mAssertMethod4ExpectedValues;
        
        private UIObjectiveQualityAsseWindow mUIObjectiveQualityAsseWindow;
        
        private UINeuesProjekterstelleWindow mUINeuesProjekterstelleWindow;
        
        private UISpeichernunterWindow mUISpeichernunterWindow;
        
        private UIÖffnenWindow mUIÖffnenWindow;
        
        private UIProgramManagerWindow mUIProgramManagerWindow;
        
        private UIObjectiveQualityAsseWindow2 mUIObjectiveQualityAsseWindow2;
        
        private UIGRILLEDSHEEPWindow mUIGRILLEDSHEEPWindow;
        #endregion
    }
    
    /// <summary>
    /// An "projectcreate" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class projectcreateParams
    {
        
        #region Fields
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowExePath = "C:\\Users\\GRILLEDSHEEP\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowAlternateExePath = "%USERPROFILE%\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "test.oqatPrj" in "Dateiname:" Kombinationsfeld auswählen
        /// </summary>
        public string UIDateinameComboBoxEditableItem = "test.oqatPrj";
        
        /// <summary>
        /// "Hallo" in "projDescField" Textfeld eingeben
        /// </summary>
        public string UIProjDescFieldEditText = "Hallo";
        
        /// <summary>
        /// "testen" in erstes Textfeld neben "Titel:" Beschriftung eingeben
        /// </summary>
        public string UIItemEditText = "testen";
        #endregion
    }
    
    /// <summary>
    /// An "Cancelbutton" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class CancelbuttonParams
    {
        
        #region Fields
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowExePath = "C:\\Users\\GRILLEDSHEEP\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowAlternateExePath = "%USERPROFILE%\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        #endregion
    }
    
    /// <summary>
    /// An "Assertsuccesfullproject" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class AssertsuccesfullprojectExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Überprüfen, ob Eigenschaft von "otto.oqatPrj"-Listenelement Exists True entspricht
        /// </summary>
        public bool UIOttooqatPrjListItemExists = true;
        
        /// <summary>
        /// Überprüfen, ob Eigenschaft von "otto.oqatPrj"-Listenelement DisplayText otto.oqatPrj entspricht
        /// </summary>
        public string UIOttooqatPrjListItemDisplayText = "otto.oqatPrj";
        #endregion
    }
    
    /// <summary>
    /// An "AssertMethod1" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class AssertMethod1ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Überprüfen, ob Eigenschaft von "test.oqatPrj"-Listenelement Exists True entspricht
        /// </summary>
        public bool UITestoqatPrjListItemExists = true;
        #endregion
    }
    
    /// <summary>
    /// An "AssertMethod2" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class AssertMethod2ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Überprüfen, ob Eigenschaft von "test.oqatPrj"-Listenelement DisplayText test.oqatPrj entspricht
        /// </summary>
        public string UITestoqatPrjListItemDisplayText = "test.oqatPrj";
        #endregion
    }
    
    /// <summary>
    /// An "CancelbuttonProjectOpendialog" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class CancelbuttonProjectOpendialogParams
    {
        
        #region Fields
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowExePath = "C:\\Users\\GRILLEDSHEEP\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowAlternateExePath = "%USERPROFILE%\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "test" in erstes Textfeld neben "Titel:" Beschriftung eingeben
        /// </summary>
        public string UIItemEditText = "test";
        
        /// <summary>
        /// "Hallo" in "projDescField" Textfeld eingeben
        /// </summary>
        public string UIProjDescFieldEditText = "Hallo";
        #endregion
    }
    
    /// <summary>
    /// An "AssertMethod3" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class AssertMethod3ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Überprüfen, ob Eigenschaft von "test.oqatPrj"-Listenelement Exists false entspricht
        /// </summary>
        public bool UITestoqatPrjListItemExists = false;
        #endregion
    }
    
    /// <summary>
    /// An "projectOpendialogtest3" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class projectOpendialogtest3Params
    {
        
        #region Fields
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowExePath = "C:\\Users\\GRILLEDSHEEP\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowAlternateExePath = "%USERPROFILE%\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowExePath1 = "C:\\Users\\GRILLEDSHEEP\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "%USERPROFILE%\MMWTV\Implementierung\OQAT\bin\Debug\OQAT.exe" starten
        /// </summary>
        public string UIObjectiveQualityAsseWindowAlternateExePath1 = "%USERPROFILE%\\MMWTV\\Implementierung\\OQAT\\bin\\Debug\\OQAT.exe";
        
        /// <summary>
        /// "test1" in "tbTitel" Textfeld eingeben
        /// </summary>
        public string UITbTitelEditText = "test1";
        #endregion
    }
    
    /// <summary>
    /// An "AssertMethod4" zu übergebende Parameter
    /// </summary>
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class AssertMethod4ExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Überprüfen, ob Eigenschaft von "myOqatPrj.oqatPrj"-Listenelement Exists True entspricht
        /// </summary>
        public bool UIMyOqatPrjoqatPrjListItemExists = true;
        
        /// <summary>
        /// Überprüfen, ob Eigenschaft von "test1.oqatPrj"-Listenelement Exists True entspricht
        /// </summary>
        public bool UITest1oqatPrjListItemExists = true;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIObjectiveQualityAsseWindow : WpfWindow
    {
        
        public UIObjectiveQualityAsseWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Objective Quality Assessment Toolkit";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Objective Quality Assessment Toolkit");
            #endregion
        }
        
        #region Properties
        public UIItemCustom UIItemCustom
        {
            get
            {
                if ((this.mUIItemCustom == null))
                {
                    this.mUIItemCustom = new UIItemCustom(this);
                }
                return this.mUIItemCustom;
            }
        }
        
        public UIObjectiveQualityAsseTitleBar UIObjectiveQualityAsseTitleBar
        {
            get
            {
                if ((this.mUIObjectiveQualityAsseTitleBar == null))
                {
                    this.mUIObjectiveQualityAsseTitleBar = new UIObjectiveQualityAsseTitleBar(this);
                }
                return this.mUIObjectiveQualityAsseTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIItemCustom mUIItemCustom;
        
        private UIObjectiveQualityAsseTitleBar mUIObjectiveQualityAsseTitleBar;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIItemCustom : WpfCustom
    {
        
        public UIItemCustom(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[UITestControl.PropertyNames.ClassName] = "Uia.VM_Welcome";
            this.WindowTitles.Add("Objective Quality Assessment Toolkit");
            #endregion
        }
        
        #region Properties
        public WpfButton UINeuesProjekterstelleButton
        {
            get
            {
                if ((this.mUINeuesProjekterstelleButton == null))
                {
                    this.mUINeuesProjekterstelleButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUINeuesProjekterstelleButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "newPrjCreate_Button";
                    this.mUINeuesProjekterstelleButton.WindowTitles.Add("Objective Quality Assessment Toolkit");
                    #endregion
                }
                return this.mUINeuesProjekterstelleButton;
            }
        }
        
        public WpfButton UIProjektsuchenButton
        {
            get
            {
                if ((this.mUIProjektsuchenButton == null))
                {
                    this.mUIProjektsuchenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIProjektsuchenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnEx";
                    this.mUIProjektsuchenButton.WindowTitles.Add("Objective Quality Assessment Toolkit");
                    #endregion
                }
                return this.mUIProjektsuchenButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUINeuesProjekterstelleButton;
        
        private WpfButton mUIProjektsuchenButton;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIObjectiveQualityAsseTitleBar : WpfTitleBar
    {
        
        public UIObjectiveQualityAsseTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfTitleBar.PropertyNames.AutomationId] = "TitleBar";
            this.WindowTitles.Add("Objective Quality Assessment Toolkit");
            #endregion
        }
        
        #region Properties
        public WpfButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUISchließenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "Close";
                    this.mUISchließenButton.WindowTitles.Add("Objective Quality Assessment Toolkit");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUISchließenButton;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UINeuesProjekterstelleWindow : WpfWindow
    {
        
        public UINeuesProjekterstelleWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WpfWindow.PropertyNames.Name] = "Neues Projekt erstellen.";
            this.SearchProperties.Add(new PropertyExpression(WpfWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Neues Projekt erstellen.");
            #endregion
        }
        
        #region Properties
        public UITitelundPfadwählenGroup UITitelundPfadwählenGroup
        {
            get
            {
                if ((this.mUITitelundPfadwählenGroup == null))
                {
                    this.mUITitelundPfadwählenGroup = new UITitelundPfadwählenGroup(this);
                }
                return this.mUITitelundPfadwählenGroup;
            }
        }
        
        public UIBeschreibungGroup UIBeschreibungGroup
        {
            get
            {
                if ((this.mUIBeschreibungGroup == null))
                {
                    this.mUIBeschreibungGroup = new UIBeschreibungGroup(this);
                }
                return this.mUIBeschreibungGroup;
            }
        }
        
        public WpfButton UIProjekterstellenButton
        {
            get
            {
                if ((this.mUIProjekterstellenButton == null))
                {
                    this.mUIProjekterstellenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIProjekterstellenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "bt1";
                    this.mUIProjekterstellenButton.WindowTitles.Add("Neues Projekt erstellen.");
                    #endregion
                }
                return this.mUIProjekterstellenButton;
            }
        }
        
        public WpfButton UIAbbrechenButton
        {
            get
            {
                if ((this.mUIAbbrechenButton == null))
                {
                    this.mUIAbbrechenButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIAbbrechenButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "bt2";
                    this.mUIAbbrechenButton.WindowTitles.Add("Neues Projekt erstellen.");
                    #endregion
                }
                return this.mUIAbbrechenButton;
            }
        }
        #endregion
        
        #region Fields
        private UITitelundPfadwählenGroup mUITitelundPfadwählenGroup;
        
        private UIBeschreibungGroup mUIBeschreibungGroup;
        
        private WpfButton mUIProjekterstellenButton;
        
        private WpfButton mUIAbbrechenButton;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UITitelundPfadwählenGroup : WpfGroup
    {
        
        public UITitelundPfadwählenGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "gb3";
            this.WindowTitles.Add("Neues Projekt erstellen.");
            #endregion
        }
        
        #region Properties
        public WpfButton UIBrowseButton
        {
            get
            {
                if ((this.mUIBrowseButton == null))
                {
                    this.mUIBrowseButton = new WpfButton(this);
                    #region Suchkriterien
                    this.mUIBrowseButton.SearchProperties[WpfButton.PropertyNames.AutomationId] = "btnBrowse";
                    this.mUIBrowseButton.WindowTitles.Add("Neues Projekt erstellen.");
                    #endregion
                }
                return this.mUIBrowseButton;
            }
        }
        
        public UITitelText UITitelText
        {
            get
            {
                if ((this.mUITitelText == null))
                {
                    this.mUITitelText = new UITitelText(this);
                }
                return this.mUITitelText;
            }
        }
        
        public WpfEdit UITbTitelEdit
        {
            get
            {
                if ((this.mUITbTitelEdit == null))
                {
                    this.mUITbTitelEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUITbTitelEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "tbTitel";
                    this.mUITbTitelEdit.WindowTitles.Add("Neues Projekt erstellen.");
                    #endregion
                }
                return this.mUITbTitelEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfButton mUIBrowseButton;
        
        private UITitelText mUITitelText;
        
        private WpfEdit mUITbTitelEdit;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UITitelText : WpfText
    {
        
        public UITitelText(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfText.PropertyNames.AutomationId] = "tb5";
            this.WindowTitles.Add("Neues Projekt erstellen.");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIItemEdit
        {
            get
            {
                if ((this.mUIItemEdit == null))
                {
                    this.mUIItemEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUIItemEdit.SearchConfigurations.Add(SearchConfiguration.NextSibling);
                    this.mUIItemEdit.WindowTitles.Add("Neues Projekt erstellen.");
                    #endregion
                }
                return this.mUIItemEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIItemEdit;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIBeschreibungGroup : WpfGroup
    {
        
        public UIBeschreibungGroup(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WpfGroup.PropertyNames.AutomationId] = "gb4";
            this.WindowTitles.Add("Neues Projekt erstellen.");
            #endregion
        }
        
        #region Properties
        public WpfEdit UIProjDescFieldEdit
        {
            get
            {
                if ((this.mUIProjDescFieldEdit == null))
                {
                    this.mUIProjDescFieldEdit = new WpfEdit(this);
                    #region Suchkriterien
                    this.mUIProjDescFieldEdit.SearchProperties[WpfEdit.PropertyNames.AutomationId] = "projDescField";
                    this.mUIProjDescFieldEdit.WindowTitles.Add("Neues Projekt erstellen.");
                    #endregion
                }
                return this.mUIProjDescFieldEdit;
            }
        }
        #endregion
        
        #region Fields
        private WpfEdit mUIProjDescFieldEdit;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UISpeichernunterWindow : WinWindow
    {
        
        public UISpeichernunterWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Speichern unter";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Speichern unter");
            #endregion
        }
        
        #region Properties
        public UIDetailbereichPane UIDetailbereichPane
        {
            get
            {
                if ((this.mUIDetailbereichPane == null))
                {
                    this.mUIDetailbereichPane = new UIDetailbereichPane(this);
                }
                return this.mUIDetailbereichPane;
            }
        }
        
        public UISpeichernWindow UISpeichernWindow
        {
            get
            {
                if ((this.mUISpeichernWindow == null))
                {
                    this.mUISpeichernWindow = new UISpeichernWindow(this);
                }
                return this.mUISpeichernWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailbereichPane mUIDetailbereichPane;
        
        private UISpeichernWindow mUISpeichernWindow;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIDetailbereichPane : WinPane
    {
        
        public UIDetailbereichPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinControl.PropertyNames.Name] = "Detailbereich";
            this.WindowTitles.Add("Speichern unter");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIDateinameComboBox
        {
            get
            {
                if ((this.mUIDateinameComboBox == null))
                {
                    this.mUIDateinameComboBox = new WinComboBox(this);
                    #region Suchkriterien
                    this.mUIDateinameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "Dateiname:";
                    this.mUIDateinameComboBox.WindowTitles.Add("Speichern unter");
                    #endregion
                }
                return this.mUIDateinameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIDateinameComboBox;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UISpeichernWindow : WinWindow
    {
        
        public UISpeichernWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Speichern unter");
            #endregion
        }
        
        #region Properties
        public WinButton UISpeichernButton
        {
            get
            {
                if ((this.mUISpeichernButton == null))
                {
                    this.mUISpeichernButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUISpeichernButton.SearchProperties[WinButton.PropertyNames.Name] = "Speichern";
                    this.mUISpeichernButton.WindowTitles.Add("Speichern unter");
                    #endregion
                }
                return this.mUISpeichernButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISpeichernButton;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIÖffnenWindow : WinWindow
    {
        
        public UIÖffnenWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Öffnen";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Öffnen");
            #endregion
        }
        
        #region Properties
        public UIÖffnenTitleBar UIÖffnenTitleBar
        {
            get
            {
                if ((this.mUIÖffnenTitleBar == null))
                {
                    this.mUIÖffnenTitleBar = new UIÖffnenTitleBar(this);
                }
                return this.mUIÖffnenTitleBar;
            }
        }
        #endregion
        
        #region Fields
        private UIÖffnenTitleBar mUIÖffnenTitleBar;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIÖffnenTitleBar : WinTitleBar
    {
        
        public UIÖffnenTitleBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.WindowTitles.Add("Öffnen");
            #endregion
        }
        
        #region Properties
        public WinButton UISchließenButton
        {
            get
            {
                if ((this.mUISchließenButton == null))
                {
                    this.mUISchließenButton = new WinButton(this);
                    #region Suchkriterien
                    this.mUISchließenButton.SearchProperties[WinButton.PropertyNames.Name] = "Schließen";
                    this.mUISchließenButton.WindowTitles.Add("Öffnen");
                    #endregion
                }
                return this.mUISchließenButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISchließenButton;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIProgramManagerWindow : WinWindow
    {
        
        public UIProgramManagerWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Program Manager";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "Progman";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public UIDesktopList UIDesktopList
        {
            get
            {
                if ((this.mUIDesktopList == null))
                {
                    this.mUIDesktopList = new UIDesktopList(this);
                }
                return this.mUIDesktopList;
            }
        }
        #endregion
        
        #region Fields
        private UIDesktopList mUIDesktopList;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIDesktopList : WinList
    {
        
        public UIDesktopList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinList.PropertyNames.Name] = "Desktop";
            this.WindowTitles.Add("Program Manager");
            #endregion
        }
        
        #region Properties
        public WinListItem UIOttooqatPrjListItem
        {
            get
            {
                if ((this.mUIOttooqatPrjListItem == null))
                {
                    this.mUIOttooqatPrjListItem = new WinListItem(this);
                    #region Suchkriterien
                    this.mUIOttooqatPrjListItem.SearchProperties[WinListItem.PropertyNames.Name] = "otto.oqatPrj";
                    this.mUIOttooqatPrjListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUIOttooqatPrjListItem;
            }
        }
        
        public WinListItem UITestoqatPrjListItem
        {
            get
            {
                if ((this.mUITestoqatPrjListItem == null))
                {
                    this.mUITestoqatPrjListItem = new WinListItem(this);
                    #region Suchkriterien
                    this.mUITestoqatPrjListItem.SearchProperties[WinListItem.PropertyNames.Name] = "test.oqatPrj";
                    this.mUITestoqatPrjListItem.WindowTitles.Add("Program Manager");
                    #endregion
                }
                return this.mUITestoqatPrjListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIOttooqatPrjListItem;
        
        private WinListItem mUITestoqatPrjListItem;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIObjectiveQualityAsseWindow2 : WinWindow
    {
        
        public UIObjectiveQualityAsseWindow2()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Objective Quality Assessment Toolkit";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "HwndWrapper", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("Objective Quality Assessment Toolkit");
            #endregion
        }
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIGRILLEDSHEEPWindow : WinWindow
    {
        
        public UIGRILLEDSHEEPWindow()
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.Name] = "GRILLEDSHEEP";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "CabinetWClass";
            this.WindowTitles.Add("GRILLEDSHEEP");
            #endregion
        }
        
        #region Properties
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIItemWindow mUIItemWindow;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Elementansicht";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("GRILLEDSHEEP");
            #endregion
        }
        
        #region Properties
        public UIElementansichtList UIElementansichtList
        {
            get
            {
                if ((this.mUIElementansichtList == null))
                {
                    this.mUIElementansichtList = new UIElementansichtList(this);
                }
                return this.mUIElementansichtList;
            }
        }
        #endregion
        
        #region Fields
        private UIElementansichtList mUIElementansichtList;
        #endregion
    }
    
    [GeneratedCode("Test-Generator für codierte UI", "10.0.30319.1")]
    public class UIElementansichtList : WinList
    {
        
        public UIElementansichtList(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Suchkriterien
            this.SearchProperties[WinList.PropertyNames.Name] = "Elementansicht";
            this.WindowTitles.Add("GRILLEDSHEEP");
            #endregion
        }
        
        #region Properties
        public WinListItem UIMyOqatPrjoqatPrjListItem
        {
            get
            {
                if ((this.mUIMyOqatPrjoqatPrjListItem == null))
                {
                    this.mUIMyOqatPrjoqatPrjListItem = new WinListItem(this);
                    #region Suchkriterien
                    this.mUIMyOqatPrjoqatPrjListItem.SearchProperties[WinListItem.PropertyNames.Name] = "myOqatPrj.oqatPrj";
                    this.mUIMyOqatPrjoqatPrjListItem.WindowTitles.Add("GRILLEDSHEEP");
                    #endregion
                }
                return this.mUIMyOqatPrjoqatPrjListItem;
            }
        }
        
        public WinListItem UITest1oqatPrjListItem
        {
            get
            {
                if ((this.mUITest1oqatPrjListItem == null))
                {
                    this.mUITest1oqatPrjListItem = new WinListItem(this);
                    #region Suchkriterien
                    this.mUITest1oqatPrjListItem.SearchProperties[WinListItem.PropertyNames.Name] = "test1.oqatPrj";
                    this.mUITest1oqatPrjListItem.WindowTitles.Add("GRILLEDSHEEP");
                    #endregion
                }
                return this.mUITest1oqatPrjListItem;
            }
        }
        #endregion
        
        #region Fields
        private WinListItem mUIMyOqatPrjoqatPrjListItem;
        
        private WinListItem mUITest1oqatPrjListItem;
        #endregion
    }
}
